#!/bin/bash --login

if ! $(tty -s); then echo "No TTY found. Be sure you're a real person coming from a real terminal and that you're not supplying your own command. Bailing out."; exit 1; fi
if [ "${TERM}x" == "dumbx" ] || [ "${TERM}x" == "x" ]; then export TERM=vt100; fi

export LESSSECURE=1

trap "" 20
trap intint INT
stty susp undef

# do nothing
function intint {
	:
}

EXPECTED_ARGS=0

if [ $# -ne $EXPECTED_ARGS ]; then
	exit
fi

. /var/lib/adom/etc/config

function link_dir {
    rm -f ${HOME}/.adom.data
    echo "$adom_ver" > ${HOME}/adom_ver
    echo "$chal" > ${HOME}/chal
    chalstr=""
    if [ "${chal}" != "" ]; then chalstr="/${chal}"; fi
    mkdir -p ${HOME}/adom.data-${adom_ver}${chalstr}
    mkdir -p ${HOME}/adom.data-${adom_ver}${chalstr}/backup
    ln -s ${HOME}/adom.data-${adom_ver}${chalstr} ${HOME}/.adom.data
}

command=""
sage=$(cat ${HOME}/sage_status)
adom_ver=$(cat ${HOME}/adom_ver)
ttyq=$(cat ${HOME}/ttyrec_status)
chal=$(cat ${HOME}/chal)

until [ "$command" = "end" ]
do
	sage=$(cat ${HOME}/sage_status)
	adom_ver=$(cat ${HOME}/adom_ver)
	ttyq=$(cat ${HOME}/ttyrec_status)
  chal=$(cat ${HOME}/chal)

	tput reset
	clear

	#Show server MOTD
        while read line; do echo -e $line; done < /var/lib/adom/etc/motd

	python /var/lib/adom/server/check_term.py
	res="$?"

	if [ "$res" == "1" ]; then
		echo ""
	fi

	quota -slq > /dev/null
        if [ $? == 1 ]; then
		echo -e " ** \e[1;31mWARNING: You are over your disk quota. Please type 'del'. \e[0m**"
        fi
	echo -ne "You're about to play \e[1mADoM\e[0m"
        #dotify
        fver=$(echo $adom_ver | sed -r -e 's/^([0-9])([0-9])(.*)/\1.\2.\3/')
        echo -ne " version \e[4m${fver}\e[0m, "
        case $chal in
          "etr")
            echo -ne "\e[4meternium man challenge mode\e[0m, "
            ;;
          "brm")
            echo -ne "\e[4mbrimstone man challenge mode\e[0m, "
            ;;
          "lth")
            echo -ne "\e[4mlithium man challenge mode\e[0m, "
            ;;
          "iro")
            echo -ne "\e[4miron man challenge mode\e[0m, "
            ;;
          "ste")
            echo -ne "\e[4msteel man challenge mode\e[0m, "
            ;;
          *)
            echo -ne "\e[4mnormal mode\e[0m, "
            ;;
         esac
	if [ -e ${HOME}/silence ]; then
		printf "\e[4mwithout\e[0m spectator messages, "
	else
		printf "\e[4mwith\e[0m spectator messages, "
	fi

	echo -ne "with ADoM Sage \e[4m$sage\e[0m,"
        echo -e " and tty recordings \e[4m$ttyq\e[0m."

	if [[ $(date +%w) = 1 ]] ; then
                echo -e "     \e[4mNOTE\e[0m: It's Monday.";
	elif [[ $(date +%w-%d) = "5-13" ]]; then
                echo -e "     \e[4mNOTE\e[0m: It's Friday the 13th.";
        fi

	if [[ $(date +%m-%d) = "07-2" ]]; then
                echo -e "     \e[4mNOTE\e[0m: It's Creator's Day!"
	elif [[ $(date +%m-%d) = "12-24" ]]; then
                echo -e "     \e[4mNOTE\e[0m: It's Christmas Eve!"
	elif [[ $(date +%m-%d) = "12-31" ]]; then
                echo -e "     \e[4mNOTE\e[0m: It's New Year's Eve."
	elif [[ $(date +%m-%d) = "10-31" ]]; then
                echo -e "     \e[4mNOTE\e[0m: It's Halloween."
        fi

  if [ -f ${HOME}/debug ]; then echo -e "\e[1mYou have ADOM DEBUG mode enabled. No binary server enhancements will be used.\e[0m"; fi 
	echo ""
  echo -ne "\e[1;33m[ a ]\e[0m launch ADoM (start or resume)	"
        echo -e "\e[1m[ h ]\e[0m view readme"
        echo -ne "\e[1m[ j ]\e[0m join this user's session (co-op)	"
        echo -e "\e[1m[ s ]\e[0m spectate other users' games"
        echo -e "\e[1;31m[ q ]\e[0m quit"
        echo ""
        echo -e "Select version:\n\e[1m[ mn ]\e[0m 1.1.1		\e[1m[ mp ]\e[0m 1.2.0pX		\e[1m[ ma ]\e[0m 1.0.0\n\e[1m[ mc ]\e[0m Select Challenge Game			\e[1m[ ms ]\e[0m swapgame"
        echo ""
        echo -ne "\e[1m[ x ]\e[0m toggle ADoM Sage                  "
        echo -e "\e[1m[ r ]\e[0m toggle tty recording"
        echo -ne "\e[1m[ t ]\e[0m send message to another user      "

	if [ -e ${HOME}/silence ]; then
                echo -ne "\e[1m[ m ]\e[0m enable"
        else
                echo -ne "\e[1m[ m ]\e[0m disable"
        fi
        echo " receiving messages"

        echo ""
        if [ -e "/var/lib/adom/public_html/adom_users/${USER}" ]; then
                echo -ne "\e[1m[ d ]\e[0m disable"
        else
                echo -ne "\e[1m[ d ]\e[0m enable"
        fi
        echo " user dir access at http://${SERVNAME}/adom_users/${USER}"
        echo -e "\e[1m[ c ]\e[0m edit ADoM, ADoM Sage, and SSH key (RSA/DSA) configurations"
        echo ""
        echo -ne "\e[1m[ g ]\e[0m browse ADoM Guidebook (SPOILERS)  "
        echo -e "\e[1m[ kp ]\e[0m kill your processes (if stuck)"
        echo -e "\e[1m[ del ]\e[0m delete all your ttyrecs, slgs, vlgs, & sshs, (with confirmation)"
        echo -e "\e[1m[ pw ]\e[0m change your password		\e[1m[ em ]\e[0m change/set your email"

	read -e -p "> " command
	case $command in
	[?h])
		echo ""
                echo "Press enter to view the readme.  PgUp/PgDn to move; up/down arrows to move"
                echo "between links, enter to follow a link (table of contents). "
                echo "External browsing is disabled. Press q to quit the readme."
                echo ""
                read
                TERM=screen elinks -localhost 1 http://localhost/
		continue
		;;

        'g')
                echo ""
                echo "Press enter to view the guidebook.  Keys:"
                echo ""
                echo "PgUp/PgDn to move"
                echo "Up/Down arrows to move between links"
                echo "Left/Right arrows to go back/forward"
                echo "Enter to follow a link"
                echo "/ to search"
                echo ""
                echo "External browsing is disabled. Press q to quit."
                read
                TERM=screen elinks -localhost 1 http://localhost/guidebook/index.html
                continue
                ;;

	'a')
		clear

		python /var/lib/adom/server/check_term.py
		res="$?"

		if [ "$res" == "1" ]; then
			echo ""
			echo "Press enter to return to the main menu."
			read junk
			continue
		fi

		export sage
		export adom_ver
    export chal
		export ttyq
    versstr=${adom_ver}
    if [ "${chal}" != "" ]; then versstr="${adom_ver}-${chal}"; fi
		echo ${versstr} > /var/lib/adom/tmp/sockets/$USER

		if [ -e "${HOME}/.adom.data/.adom.cnt" ]; then
			/var/lib/adom/bin/modify_cnt "${HOME}/.adom.data/.adom.cnt"
		fi

		screen -DR -c /var/lib/adom/server/user-screen -S adom -s \
		"/var/lib/adom/server/adom_wrapper"
		rm -f /var/lib/adom/tmp/sockets/$USER
		continue
		;;

	"mn")
		if [ -e "${HOME}/.adom.data/.adom.prc" ]; then
			echo "Cannot change version; ADoM is running!"
			sleep 2
			continue
		fi

		adom_ver="111"
    link_dir
		continue
		;;

	"ma")
		if [ -e "${HOME}/.adom.data/.adom.prc" ]; then
			echo "Cannot change version; ADoM is running!"
			sleep 2
			continue
		fi

		adom_ver="100"
    link_dir
		continue
		;;

        "mp")
                if [ -e "${HOME}/.adom.data/.adom.prc" ]; then
                        echo "Cannot change version; ADoM is running!"
                        sleep 2
                        continue
                fi

                DEF=${MAX_PRE}
                if [[ ! -f $HOME/donated ]]; then
                        DEF=${LATEST_FREE_PRE}
                fi

                echo "Which prerelease (default: 1.2.0p${DEF})? "
                prompt=""
                for i in $(seq ${MIN_PRE} ${MAX_PRE}); do
                        prompt="${prompt}  (${i}) p${i}"
                done
                read -e -p "${prompt}: " pvers
                pvers="${pvers:-$DEF}"
                if [[ $pvers != *[[:digit:]]* ]] || [ $pvers -lt 3 ] || [ $pvers -gt $MAX_PRE ]; then
                        echo "Invalid selection"
                        sleep 3
                        continue
                fi
                if [[ $pvers -gt ${LATEST_FREE_PRE} ]] || [[ $pvers -eq 4 ]]; then
                        /var/lib/adom/server/donation_check.sh
                        if [ $? -ne 0 ]; then continue; fi
                fi

                adom_ver="120p${pvers}"
                link_dir
                continue
                ;;

	"me")
		if [ -e "${HOME}/.adom.data/.adom.prc" ]; then
			echo "Cannot change version; ADoM is running!"
			sleep 2
			continue
		fi

		adom_ver="111"
    chal="etr"
    link_dir
		continue
		;;

  "mc")
    if [ -e "${HOME}/.adom.data/.adom.prc" ]; then
      echo "Cannot change version; ADoM is running!"
      sleep 2
      continue
    fi
    export adom_ver; export chal
    /var/lib/adom/server/select_challenge
    chal=$(cat ${HOME}/chal)
    link_dir
    continue
    ;;


	"ms")
		if [ -e "${HOME}/.adom.data/.adom.prc" ]; then
			echo "Cannot change version; ADoM is running!"
			sleep 2
			continue
		fi

		rm -f ${HOME}/.adom.data
		adom_ver="swp"
		echo "$adom_ver" > ${HOME}/adom_ver
		ln -s ${HOME}/adom.data-$adom_ver ${HOME}/.adom.data
		continue
		;;

	'm')
		if [ -e ${HOME}/silence ]; then
			rm ${HOME}/silence
		else
			> ${HOME}/silence
		fi
		continue
		;;

	'x')
		if [ "$sage" = "disabled" ]; then
			echo "enabled" > ${HOME}/sage_status
		else
			echo "disabled" > ${HOME}/sage_status
		fi
		continue
		;;

        'r')
                if [ "$ttyq" = "disabled" ]; then
                        echo "enabled" > ${HOME}/ttyrec_status
                else
                        echo "disabled" > ${HOME}/ttyrec_status
                fi
                continue
                ;;

        'del')
                OLDSZ=$(du -shx $HOME | cut -f1)
                echo -e "Your homedir usage is $OLDSZ. Delete ALL your ttyrecs, vlgs, slgs, and .sshs?\n(y/N)?"
                read -e ANSWER
                if [[ $ANSWER = [yY]* ]]; then
                        find $HOME/ttyrecs -type f -delete -print
                        find $HOME -type f -name "*.ssh" -delete -print
                        find $HOME -type f -name "*.slg" -delete -print
                        find $HOME -type f -name "*.vlg" -delete -print
                        find $HOME -type f -name "core" -delete -print
                fi
                NEWSZ=$(du -shx $HOME | cut -f1)
                echo "Your new disk usage is $NEWSZ. (press enter)"
                read
                continue
                ;;

	'c')
		export adom_ver
    export chal
		/var/lib/adom/server/conf_adom
		echo
		sleep 1
		continue
		;;

	'pw')
		passwd
		sleep 1
		continue
		;;

	'em')
		curmail=$(getent passwd "$USER" | cut -d ':' -f 5 | cut -d ',' -f 2)
		echo "If you provide an e-mail address, password recovery will be possible"
		echo "(by the admin sending you a new one)."
		echo "Enter nothing to blank it. Fail the password prompt to discard changes."
		echo -e "Current setting is: '${curmail}'\n"
		read -e -p "Email address (optional): " email

		chfn -r "${email}"
		curmail=$(getent passwd "$USER" | cut -d ':' -f 5 | cut -d ',' -f 2)
		echo "Your email is set to '${curmail}'"
		sleep 3
		continue
		;;

	'kp')
		clear
		rm -f /var/lib/adom/tmp/sockets/$USER
		python -u /var/lib/adom/server/irc_msg_kill.py
		continue
		;;

	'd')
		if [ -e "/var/lib/adom/public_html/adom_users/${USER}" ]; then
			rm "/var/lib/adom/public_html/adom_users/${USER}"
			echo "Directory link removed."
		else
			ln -s "${HOME}" "/var/lib/adom/public_html/adom_users/${USER}"
			echo "Directory link created."
			find $HOME -type d -name savedg -exec chmod 755 '{}' \;
		fi

		sleep 1
		continue
		;;

	q|z)
		exit
		;;

	'e')
		exit
		;;

	'j')
		clear

		python /var/lib/adom/server/check_term.py
		res="$?"

		if [ "$res" == "1" ]; then
			echo ""
			echo "Press enter to return to the main menu."
			read junk
			continue
		fi

		screen -x -c /var/lib/adom/server/user-screen
		continue
		;;

	's')
		ssh -o "StrictHostKeyChecking no" -i /var/lib/adom/etc/adomusers_key spectator@localhost
		continue
		;;
   'debug')
     if [ -f ${HOME}/debug ]; then rm -f ${HOME}/debug
     else touch ${HOME}/debug
     fi
     ;;

	't')
		trap - INT
		/var/lib/adom/server/talk_at
		trap intint INT
		continue
		;;

	*)
		echo "Erroneous selection!"
		sleep 1
		continue
		;;
	esac
done
